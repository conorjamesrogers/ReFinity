'use strict';

const _ = require('lodash');
const yaml = require('js-yaml');
const path = require('path');
const fs = require('fs');
const wrench = require('wrench');
const chokidar = require('chokidar');

require('require.fresh')(module, require);

module.exports = class Project {

  constructor (dir) {
    var self = this;
    self.dir = self.path = dir;
  }

  exists (filename) {
    var self = this;
    return fs.existsSync(self.resolve(filename || '.'));
  }

  list (find) {
    var self = this;
    return fs
      .readdirSync(self.dir)
      .filter(file => file.includes(find || ''));
  }

  files (find) {
    var self = this;
    return self
      .list(find)
      .map(file => self.resolve(file));
  }

  resolve (p) {
    var self = this,
      filename = path.resolve(self.dir, p);
    return filename;
  }

  resolveExt (p, ext) {
    var self = this,
      filename = self.resolve(p);
    return path.extname(filename) === ext
      ? filename : filename + ext;
  }

  write (file, content) {
    var self = this,
      filename = self.resolve(file),
      dir = path.dirname(filename);
    if (!fs.existsSync(dir)) {
      wrench.mkdirSyncRecursive(dir);
    }
    return fs.writeFileSync(
      filename,
      content
    );
  }

  read (filename, e) {
    var self = this,
      encoding = e || 'utf-8';
    return fs.readFileSync(
      self.resolve(filename),
      encoding
    );
  }

  yaml (filename) {
    var self = this,
      source = self.read(
        self.resolveExt(filename, '.yaml')
      );
    return yaml.safeLoad(source);
  }

  yamlDir (dir) {
    var self = this,
      dirname = self.resolve(dir),
      data = {};
    wrench
      .readdirSyncRecursive(
        self.resolve(dirname)
      )
      .map(file => {
        var filename = path.resolve(dirname, file);
        return {
          file: file,
          filename: filename
        };
      })
      .filter(file => fs.statSync(file.filename).isFile())
      .filter(file => path.extname(file.file) === '.yaml')
      .forEach(file => {
        var source = fs.readFileSync(file.filename, 'utf-8'),
          fileData = yaml.safeLoad(source),
          name = file.file
            .replace('.yaml', '')
            .replace(/\//mgi, '.');
        _.set(data, name, fileData);
      });
    return data;
  }

  yamlWatchAndDump (input, output) {
    var self = this;

    chokidar
      .watch(self.resolve(`${input}/**/*.yaml`))
      .on('change', dump);

    return dump();

    function dump() {
      return self.jsonDump(
        output,
        self.yamlDir(input)
      );
    }
  }

  require (name) {
    var self = this,
      filename = require.resolve(
        self.resolve(name)
      );
    return require.fresh(filename);
  }

  json (name) {
    var self = this,
      data = self.require(name);
    return JSON.parse(
      JSON.stringify(data, null, 2)
    );
  }

  jsonDump (file, data) {
    var self = this;
    self.write(
      file,
      JSON.stringify(data, null, 2)
    );
    return data;
  }

  clearDir (dir) {
    var self = this,
      dirname = self.resolve(dir);
    wrench.rmdirSyncRecursive(dirname, true);
    fs.mkdirSync(dirname);
  }

  mkdir (dir) {
    var self = this,
      dirname = self.resolve(dir);
    if (fs.existsSync(dirname)) { return false; }
    fs.mkdirSync(dirname);
    return true;
  }

}
